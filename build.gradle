plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.12'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "org.liquibase.gradle" version "2.1.1"
}

group = 'com.tech.bee'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = "1.4.2.Final"
}

bootRun {
	systemProperty "spring.profiles.active", project.findProperty("spring.profiles.active") ?: "default"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation('org.springframework.boot:spring-boot-starter') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	implementation 'io.micrometer:micrometer-registry-prometheus:1.12.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
	implementation group: 'javax.persistence', name: 'javax.persistence-api'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation group: 'org.postgresql', name: 'postgresql'
	implementation group: 'org.apache.commons', name: 'commons-lang3'
	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	implementation group: 'org.zalando', name: 'logbook-spring-boot-starter', version: '3.4.0'
	implementation 'org.liquibase:liquibase-core:4.19.1'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
	implementation 'org.yaml:snakeyaml:1.32'
	implementation 'org.springframework.boot:spring-boot-starter-security:2.7.6'
	implementation 'org.keycloak:keycloak-spring-security-adapter:21.1.1'
	implementation 'org.keycloak:keycloak-spring-boot-starter:21.1.1'
	implementation 'org.springframework.boot:spring-boot-starter-security:2.7.6'
	implementation 'org.keycloak:keycloak-spring-security-adapter:21.1.1'
	implementation 'ch.qos.logback:logback-classic'
	implementation 'ch.qos.logback:logback-core'
	implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.9'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'biz.paluch.logging:logstash-gelf:1.12.0'
	implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
}

tasks.named('test') {
	useJUnitPlatform()
}
//
//task generateChangeSetsFromDb(type: JavaExec) {
//	main = 'liquibase.integration.commandline.Main'
//	classpath = sourceSets.main.runtimeClasspath
//	args "--url=jdbc:postgresql://localhost:5432/techbeeDb"
//	args "--username=postgres"
//	args "--password=admin12345"
//	args "--driver=org.postgresql.Driver"
//	args "--changeLogFile=src/main/resources/db/db.changelog-master.xml"
//	args "generateChangeLog"
//}
//task generateSqlChangeSets(type: Exec) {
//	dependsOn 'classes' // Ensure classes are compiled before generating SQL
//		def activeProfiles = System.getProperty('spring.profiles.active')
//		println "Active Profiles ======= ${activeProfiles}"
//		if(activeProfiles){
//			def applicationProperties = new Properties()
//			if (activeProfiles.contains('local')) {
//				file('src/main/resources/application-local.yml').withInputStream { inputStream ->
//					applicationProperties.load(inputStream)
//				}
//			}
//			applicationProperties.forEach((key,value)->{
//				println "===== ${key}:${value}===="
//			})
//			def changeLogFile = applicationProperties.getProperty('changeLog')
//			def dataSourceUrl = applicationProperties.getProperty('url')
//			def dataSourceUserName = applicationProperties.getProperty('username')
//			def dataSourcePassword = applicationProperties.getProperty('password')
//			println "=== Genetaing SQl changelog =="
//			commandLine 'java', '-cp', sourceSets.main.runtimeClasspath.asPath,
//					'liquibase.integration.commandline.Main',
//					"--changeLogFile=${changeLogFile}", // Replace with your changelog file path
//					"--url=${dataSourceUrl}",
//					"--username=${dataSourceUserName}",
//					"--password=${dataSourcePassword}",
//					'--driver=org.postgresql.Driver',
//					'updateSQL'
//			workingDir project.projectDir
//			println "=== SQl changelog generated =="
//		}
//}
